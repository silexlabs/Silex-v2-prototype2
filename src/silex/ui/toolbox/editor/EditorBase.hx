package silex.ui.toolbox.editor;

import js.Lib;
import js.Dom;

import org.slplayer.component.ui.DisplayObject;
import org.slplayer.util.DomTools;
import silex.property.PropertyModel;
import silex.component.ComponentModel;
import silex.layer.LayerModel;
import silex.publication.PublicationModel;

/**
 * This component is the base class for all editors in Silex. 
 * Editors are SLPlayer components, in charge of handling HTML input elements, 
 * in order to let the user enter values and edit css style values or tag attributes.
 * The name of the style or attribute is specifiyed as data-attribute-name or data-style-name
 * And the values are given as key/value pairs
 */
@tagNameFilter("fieldset div")
class EditorBase extends DisplayObject 
{
	/**
	 * Information for debugging, e.g. the class name
	 */ 
	public static inline var DEBUG_INFO:String = "silex.ui.toolbox.editor.EditorBase class";
	/**
	 * selected element
	 */ 
	public var selectedItem(default, setSelectedItem):HtmlDom;
	/**
	 * prevent the refresh action generated by our modifications on the model
	 */
	private var propertyChangePending:Bool = false;
	/**
	 * Constructor
	 * Start listening the input events
	 */
	public function new(rootElement:HtmlDom, SLPId:String)
	{
		super(rootElement, SLPId);
		// listen to the change event of HTML inputs
		if (onInput != null){
			rootElement.addEventListener("input", onInput, true);
			rootElement.addEventListener("change", onInput, true);
		}
		// listen to the property change event
		PropertyModel.getInstance().addEventListener(PropertyModel.ON_PROPERTY_CHANGE, onPropertyChange, DEBUG_INFO);
		// listen to the component change event
		ComponentModel.getInstance().addEventListener(ComponentModel.ON_SELECTION_CHANGE, onSelectComponent, DEBUG_INFO);
		// listen to the component change event
		LayerModel.getInstance().addEventListener(LayerModel.ON_SELECTION_CHANGE, onSelectLayer, DEBUG_INFO);

		reset();
	}
	////////////////////////////////////////////
	// Load, apply and reset: display or apply the properties of the selected HTML dom element
	////////////////////////////////////////////
	/**
	 * reset the values
	 * this method should be implemented in the derived class
	 */
	private function reset() {
		throw("this method should be implemented in the derived class");
	}
	/**
	 * display the property value
	 * this method should be implemented in the derived class
	 */
	private function load(element:HtmlDom) {
		throw("this method should be implemented in the derived class");
	}
	/**
	 * apply the property value
	 * this method should be implemented in the derived class
	 */
	private function apply() {
		throw("this method should be implemented in the derived class");
	}
	/**
	 * lock redraw, because apply will trigger a refresh event
	 */
	private function beforeApply() {
		propertyChangePending = true;
	}
	/**
	 * unlock redraw after saving
	 */
	private function afterApply() {
		propertyChangePending = false;
	}
	////////////////////////////////////////////
	// Current selection and display
	////////////////////////////////////////////
	/**
	 * Setter for the selected item
	 * Dispatch the change event with the item reference as the detail property of the custom event
	 */
	public function setSelectedItem(item:HtmlDom):HtmlDom {
		// trace("setSelectedItem("+item+")");
		selectedItem = item;
		refresh();
		return selectedItem;
	}
	/**
	 * refresh display
	 */
	private function refresh() {
		// trace("refresh");
		if (selectedItem != null)
			load(selectedItem);
		else
			reset();
	}
	////////////////////////////////////////////
	// Manipulation of the HTML input
	////////////////////////////////////////////
	/**
	 * @returns 	true if the option exists in the given select tag
	 */
	private function hasOptionValue(name:String, value:String):Bool{
		var element = DomTools.getSingleElement(rootElement, name, true);
		var options = element.getElementsByTagName("option");
		for (idx in 0...options.length){
			if(cast(options[idx]).value == value)
				return true;
		}
		return false;
	}
	/**
	 * get a list of options for the given select tag
	 */
	private function getOptions(name:String):HtmlCollection<Option>{
		var element = DomTools.getSingleElement(rootElement, name, true);
		var options = element.getElementsByTagName("option");
		return cast(options);
	}
	/**
	 * set the value of the input control with name in its class name
	 */
	private function setInputValue(name:String, value:Dynamic, inputProperty:String = "value"){
		// trace("setInputValue "+name+", "+value);
		var element = DomTools.getSingleElement(rootElement, name, true);
		Reflect.setField(element, inputProperty, value);
	}
	/**
	 * get the value from the input control with name in its class name
	 */
	private function getInputValue(name:String, inputProperty:String = "value"):Dynamic{
		var element = DomTools.getSingleElement(rootElement, name, true);
		// trace("getInputValue "+name+" - "+Reflect.field(element, inputProperty));
		return Reflect.field(element, inputProperty);
	}
	////////////////////////////////////////////
	// Callbacks for the view
	////////////////////////////////////////////
	/**
	 * callback for the click event, validate the data
	 */
	private function onInput(e:Event) {
		// trace("onInput");
		e.preventDefault();
		beforeApply();
		apply();
		afterApply();
	}
	////////////////////////////////////////////
	// Callbacks for the model
	////////////////////////////////////////////
	/**
	 * Callback for the PropertyModel singleton
	 * A property value has changed,
	 * @param 	e 	CustomEvent with the PropertyData object in e.detail
	 */
	private function onPropertyChange(e:CustomEvent) {
		if (propertyChangePending)
			return;

		refresh();
	}
	/**
	 * Callback for the component model event
	 * display the component style
	 */
	private function onSelectComponent(e:CustomEvent) {
		// trace("onSelectComponent");
		selectedItem = e.detail;
	}
	/**
	 * Callback for the layer model event
	 * display the layer style
	 */
	private function onSelectLayer(e:CustomEvent) {
		// trace("onSelectLayer");
		if (e.detail == null){
			selectedItem = null;
		}
		else{
			selectedItem = e.detail.rootElement;
		}
	}
	////////////////////////////////////////////
	// Helpers
	////////////////////////////////////////////
	/**
	 * convert into relative url
	 */
	private function abs2rel(url:String):String{
		var pubUrl = "publications/" + PublicationModel.currentName + "/";
		var idxPubFolder = url.indexOf(pubUrl);
		if (idxPubFolder >= 0){
			// remove file name if there is one
			var idxSlash = pubUrl.lastIndexOf("/");
			var idxDot = pubUrl.lastIndexOf(".");
			if (idxSlash < idxDot)
				pubUrl = pubUrl.substr(idxSlash);
			// remove all the common parts
			url = url.substr(idxPubFolder + pubUrl.length);
			trace(" url "+ url );
		}
		return url;
	}
}